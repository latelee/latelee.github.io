// Search script generated by doxygen
// Copyright (C) 2009 by Dimitri van Heesch.

// The code in this file is loosly based on main.js, part of Natural Docs,
// which is Copyright (C) 2003-2008 Greg Valure
// Natural Docs is licensed under the GPL.

var indexSectionsWithContent =
{
  0: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111100110001111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  1: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100011100100000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  2: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000100000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  3: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000100000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  4: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011001011000100001010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  5: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  6: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000010000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
};

var indexSectionNames =
{
  0: "all",
  1: "classes",
  2: "files",
  3: "functions",
  4: "variables",
  5: "typedefs",
  6: "defines"
};

function convertToId(search)
{
  var result = '';
  for (i=0;i<search.length;i++) { var c="search.charAt(i);" cn="c.charCodeAt(0);" if (c.match( [a-z0-9] )) result+="c;" } else (cn<16) +cn.tostring(16); return result; function getxpos(item) x="0;" (item.offsetwidth) while (item && item!="document.body)" +="item.offsetLeft;" item="item.offsetParent;" x; getypos(item) y="0;" y; * a class handling everything associated with the search panel. parameters: name - of global variable that will be storing this instance. is needed to able set timeouts. resultpath path use for external files searchbox(name, resultspath, inframe, label) (!name || !resultspath) alert("missing parameters searchbox."); ---------- instance variables this.name="name;" this.resultspath="resultsPath;" this.keytimeout="0;" this.keytimeoutlength="500;" this.closeselectiontimeout="300;" this.lastsearchvalue ; this.lastresultspage this.hidetimeout="0;" this.searchindex="0;" this.searchactive="false;" this.insideframe="inFrame;" this.searchlabel="label;" ----------- dom elements this.domsearchfield="function()" document.getelementbyid("msearchfield"); this.domsearchselect="function()" document.getelementbyid("msearchselect"); this.domsearchselectwindow="function()" document.getelementbyid("msearchselectwindow"); this.dompopupsearchresults="function()" document.getelementbyid("msearchresults"); this.dompopupsearchresultswindow="function()" document.getelementbyid("msearchresultswindow"); this.domsearchclose="function()" document.getelementbyid("msearchclose"); this.domsearchbox="function()" document.getelementbyid("msearchbox"); ------------ event handlers called when focus added or removed from field. this.onsearchfieldfocus="function(isActive)" this.activate(isactive); this.onsearchselectshow="function()" searchselectwindow="this.DOMSearchSelectWindow();" searchfield="this.DOMSearchSelect();" (this.insideframe) left="getXPos(searchField);" top="getYPos(searchField);" 6; show selection popup searchselectwindow.style.display="block" searchselectwindow.style.left="left" 'px'; searchselectwindow.style.top="top" stop hide timer (this.hidetimeout) cleartimeout(this.hidetimeout); false; avoid "image drag" default this.onsearchselecthide="function()" +".closeselectionwindow()", this.closeselectiontimeout); content field changed. this.onsearchfieldchange="function(evt)" (this.keytimeout) kill running cleartimeout(this.keytimeout); e="(evt)" ? evt : window.event; ie (e.keycode="=40" e.keycode="=13)" (e.shiftkey="=1)" this.onsearchselectshow(); win="this.DOMSearchSelectWindow();" (i="0;i<win.childNodes.length;i++)" child="win.childNodes[i];" get span within (child.classname="='SelectItem')" child.focus(); return; (window.frames.msearchresults.searchresults) elem="window.frames.MSearchResults.searchResults.NavNext(0);" (elem) elem.focus(); escape out this.domsearchfield().blur(); this.dompopupsearchresultswindow().style.display="none" this.domsearchclose().style.display="none" this.activate(false); strip whitespaces searchvalue="this.DOMSearchField().value.replace(/" g, ""); (searchvalue !="this.lastSearchValue)" value has changed ) non-empty update '.search()', this.keytimeoutlength); empty this.selectitemcount="function(id)" count="0;" count++; count; this.selectitemset="function(id)" i,j="0;" node="child.firstChild;" (j="=id)" node.innerhtml="&bull;" j++; an filter made. index id as active this.onselectitem="function(id)" this.selectitemset(id); (searchvalue! this.searchactive) something was found> do a search
    {
      this.Search();
    }
  }

  this.OnSearchSelectKey = function(evt)
  {
    var e = (evt) ? evt : window.event; // for IE
    if (e.keyCode==40 && this.searchIndex<this.SelectItemCount()) down { this.searchindex++; this.onselectitem(this.searchindex); } else if (e.keycode="=38" && this.searchindex>0) // Up
    {
      this.searchIndex--;
      this.OnSelectItem(this.searchIndex);
    }
    else if (e.keyCode==13 || e.keyCode==27)
    {
      this.OnSelectItem(this.searchIndex);
      this.CloseSelectionWindow();
      this.DOMSearchField().focus();
    }
    return false;
  }

  // --------- Actions

  // Closes the results window.
  this.CloseResultsWindow = function()
  {
    this.DOMPopupSearchResultsWindow().style.display = 'none';
    this.DOMSearchClose().style.display = 'none';
    this.Activate(false);
  }

  this.CloseSelectionWindow = function()
  {
    this.DOMSearchSelectWindow().style.display = 'none';
  }

  // Performs a search.
  this.Search = function()
  {
    this.keyTimeout = 0;

    // strip leading whitespace
    var searchValue = this.DOMSearchField().value.replace(/^ +/, "");

    var code = searchValue.toLowerCase().charCodeAt(0);
    var hexCode;
    if (code<16) { hexcode="0" +code.tostring(16); } else var resultspage; resultspagewithsearch; hasresultspage; if (indexsectionswithcontent[this.searchindex].charat(code)="=" '1') resultspage="this.resultsPath" + ' indexsectionnames[this.searchindex] '_' '.html'; resultspagewithsearch="resultsPage+'?'+escape(searchValue);" hasresultspage="true;" nothing available for this search term nomatches.html'; window.frames.msearchresults.location.href="resultsPageWithSearch;" dompopupsearchresultswindow="this.DOMPopupSearchResultsWindow();" (dompopupsearchresultswindow.style.display!="block" ) domsearchbox="this.DOMSearchBox();" this.domsearchclose().style.display="inline" ; (this.insideframe) dompopupsearchresults="this.DOMPopupSearchResults();" dompopupsearchresultswindow.style.position="relative" dompopupsearchresultswindow.style.display="block" width="document.body.clientWidth" - 8; the -8 is ie :-( dompopupsearchresultswindow.style.width="width" 'px'; dompopupsearchresults.style.width="width" left="getXPos(domSearchBox)" 150; domsearchbox.offsetwidth; top="getYPos(domSearchBox)" 20; domsearchbox.offsetheight 1; dompopupsearchresultswindow.style.top="top" dompopupsearchresultswindow.style.left="left" this.lastsearchvalue="searchValue;" this.lastresultspage="resultsPage;" -------- activation functions activates or deactivates panel, resetting things to their default values necessary. this.activate="function(isActive)" (isactive || open it this.dompopupsearchresultswindow().style.display="=" 'block' this.domsearchbox().classname="MSearchBoxActive" searchfield="this.DOMSearchField();" (searchfield.value="=" this.searchlabel) clear "search" upon entry searchfield.value this.searchactive="true;" (!isactive) directly remove panel this.domsearchfield().value="this.searchLabel;" ----------------------------------------------------------------------- class that handles everything on results page. function searchresults(name) number of matches from last run <search()>.
    this.lastMatchCount = 0;
    this.lastKey = 0;
    this.repeatOn = false;

    // Toggles the visibility of the passed element ID.
    this.FindChildElement = function(id)
    {
      var parentElement = document.getElementById(id);
      var element = parentElement.firstChild;

      while (element && element!=parentElement)
      {
        if (element.nodeName == 'DIV' && element.className == 'SRChildren')
        {
          return element;
        }

        if (element.nodeName == 'DIV' && element.hasChildNodes())
        {  
           element = element.firstChild;  
        }
        else if (element.nextSibling)
        {  
           element = element.nextSibling;  
        }
        else
        {
          do
          {
            element = element.parentNode;
          }
          while (element && element!=parentElement && !element.nextSibling);

          if (element && element!=parentElement)
          {  
            element = element.nextSibling;  
          }
        }
      }
    }

    this.Toggle = function(id)
    {
      var element = this.FindChildElement(id);
      if (element)
      {
        if (element.style.display == 'block')
        {
          element.style.display = 'none';
        }
        else
        {
          element.style.display = 'block';
        }
      }
    }

    // Searches for the passed string.  If there is no parameter,
    // it takes it from the URL query.
    //
    // Always returns true, since other documents may try to call it
    // and that may or may not be possible.
    this.Search = function(search)
    {
      if (!search) // get search word from URL
      {
        search = window.location.search;
        search = search.substring(1);  // Remove the leading '?'
        search = unescape(search);
      }

      search = search.replace(/^ +/, ""); // strip leading spaces
      search = search.replace(/ +$/, ""); // strip trailing spaces
      search = search.toLowerCase();
      search = convertToId(search);

      var resultRows = document.getElementsByTagName("div");
      var matches = 0;

      var i = 0;
      while (i < resultRows.length)
      {
        var row = resultRows.item(i);
        if (row.className == "SRResult")
        {
          var rowMatchName = row.id.toLowerCase();
          rowMatchName = rowMatchName.replace(/^sr\d*_/, ''); // strip 'sr123_'

          if (search.length<=rowMatchName.length && rowmatchname.substr(0, search.length)="=search)" { row.style.display="block" ; matches++; } else i++; document.getelementbyid("searching").style.display="none" if (matches="=" 0) no results document.getelementbyid("nomatches").style.display="block" at least one result this.lastmatchcount="matches;" return true; the first item with index or higher that is visible this.navnext="function(index)" var focusitem; while (1) focusname="Item" +index; focusitem="document.getElementById(focusName);" (focusitem focusitem.parentnode.parentnode.style.display="='block')" break; (!focusitem) last element index++; this.navprev="function(index)" index--; this.processkeys="function(e)" (e.type="=" "keydown") this.repeaton="false;" this.lastkey="e.keyCode;" "keypress") (!this.repeaton) (this.lastkey) false; ignore keypress after keydown "keyup") this.lastkey!="0;" this.nav="function(evt,itemIndex)" e="(evt)" ? evt : window.event; for ie (e.keycode="=13)" (!this.processkeys(e)) (this.lastkey="=38)" up newindex="itemIndex-1;" (focusitem) child="this.FindChildElement(focusItem.parentNode.parentNode.id);" (child child.style.display="=" 'block') children n="0;" tmpelem; search tmpelem="document.getElementById('Item'+newIndex+'_c'+n);" (tmpelem) found it! n++; focusitem.focus(); focus to field parent.document.getelementbyid("msearchfield").focus(); down elem="this.FindChildElement(item.parentNode.parentNode.id);" (elem elem.style.display="=" right (elem) left escape parent.searchbox.closeresultswindow(); enter this.navchild="function(evt,itemIndex,childIndex)" (childindex>0)
        {
          var newIndex = childIndex-1;
          document.getElementById('Item'+itemIndex+'_c'+newIndex).focus();
        }
        else // already at first child, jump to parent
        {
          document.getElementById('Item'+itemIndex).focus();
        }
      }
      else if (this.lastKey==40) // Down
      {
        var newIndex = childIndex+1;
        var elem = document.getElementById('Item'+itemIndex+'_c'+newIndex);
        if (!elem) // last child, jump to parent next parent
        {
          elem = this.NavNext(itemIndex+1);
        }
        if (elem)
        {
          elem.focus();
        } 
      }
      else if (this.lastKey==27) // Escape
      {
        parent.searchBox.CloseResultsWindow();
        parent.document.getElementById("MSearchField").focus();
      }
      else if (this.lastKey==13) // Enter
      {
        return true;
      }
      return false;
    }
}
</=rowMatchName.length></16)></this.SelectItemCount())></search.length;i++)>